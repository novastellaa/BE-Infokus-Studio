generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String        @db.VarChar(100)
  name         String        @db.VarChar(255)
  phone        String        @db.VarChar(20)
  role         Role          @default(user)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  reservations Reservation[]
  Review       Review[]

  @@map("users")
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(255)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  deletedAt         DateTime?         @map("deleted_at")
  category_addons   CategoryAddon[]
  category_packages CategoryPackage[]
  images            Image[]
  reservations      Reservation[]

  @@map("categories")
}

model Image {
  id                  Int                @id @default(autoincrement())
  imageUrl            String             @map("image_url") @db.VarChar(255)
  entity              ImageEntity
  categoryId          Int?               @map("category_id")
  transactionDetailId Int?               @map("transaction_detail_id")
  createdAt           DateTime           @default(now()) @map("created_at")
  category            Category?          @relation(fields: [categoryId], references: [id])
  transaction_detail  TransactionDetail? @relation(fields: [transactionDetailId], references: [id])

  @@index([categoryId], map: "images_category_id_fkey")
  @@index([transactionDetailId], map: "images_transaction_detail_id_fkey")
  @@map("images")
}

model CategoryPackage {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  description  String        @db.Text
  price        Int
  categoryId   Int           @map("category_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")
  category     Category      @relation(fields: [categoryId], references: [id])
  reservations Reservation[]

  @@index([categoryId], map: "category_packages_category_id_fkey")
  @@map("category_packages")
}

model CategoryAddon {
  id                 Int                 @id @default(autoincrement())
  name               String              @db.VarChar(255)
  price              Int
  unit               String              @db.VarChar(255)
  categoryId         Int                 @map("category_id")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  deletedAt          DateTime?           @map("deleted_at")
  category           Category            @relation(fields: [categoryId], references: [id])
  reservation_detail ReservationDetail[]

  @@index([categoryId], map: "category_addons_category_id_fkey")
  @@map("category_addons")
}

model TimeSlot {
  id           Int           @id @default(autoincrement())
  time         DateTime      @map("time_slot") @db.Time(0)
  createdAt    DateTime      @default(now()) @map("created_at")
  deletedAt    DateTime?     @map("deleted_at")
  reservations Reservation[]

  @@map("time_slots")
}

model Reservation {
  id                 Int                 @id @default(autoincrement())
  date               DateTime            @map("date") @db.Date
  total              Int
  status             ReservationStatus   @default(pending)
  userId             String              @map("user_id")
  categoryId         Int                 @map("category_id")
  categoryPackageId  Int                 @map("category_package_id")
  timeSlotId         Int                 @map("time_slot_id")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  cancelledAt        DateTime?           @map("cancelled_at")
  successAt          DateTime?           @map("success_at")
  reservation_detail ReservationDetail[]
  category           Category            @relation(fields: [categoryId], references: [id])
  categoryPackage    CategoryPackage     @relation(fields: [categoryPackageId], references: [id])
  timeSlot           TimeSlot            @relation(fields: [timeSlotId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
  review             Review[]
  transactions       Transaction?

  @@index([categoryId], map: "reservations_category_id_fkey")
  @@index([categoryPackageId], map: "reservations_category_package_id_fkey")
  @@index([timeSlotId], map: "reservations_time_slot_id_fkey")
  @@index([userId], map: "reservations_user_id_fkey")
  @@map("reservations")
}

model ReservationDetail {
  id              Int           @id @default(autoincrement())
  quantity        Int
  reservationId   Int           @map("reservation_id")
  categoryAddonId Int           @map("category_addon_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  categoryAddon   CategoryAddon @relation(fields: [categoryAddonId], references: [id])
  reservation     Reservation   @relation(fields: [reservationId], references: [id])

  @@index([categoryAddonId], map: "reservation_details_category_addon_id_fkey")
  @@index([reservationId], map: "reservation_details_reservation_id_fkey")
  @@map("reservation_details")
}

model Transaction {
  id                 Int                 @id @default(autoincrement())
  total              Int
  status             TransactionStatus   @default(unpaid) @map("transaction_status")
  type               TransactionType     @map("transaction_type")
  reservationId      Int                 @unique(map: "Transaction_reservation_id_key") @map("reservation_id")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  expiredAt          DateTime?           @map("exprired_at")
  paidoffAt          DateTime?           @map("paidoff_at")
  reservation        Reservation         @relation(fields: [reservationId], references: [id])
  transaction_detail TransactionDetail[]

  @@map("transaction")
}

model TransactionDetail {
  id            Int               @id @default(autoincrement())
  total         Int
  type          TransactionType   @map("transaction_type")
  isValid       TransactionValid? @map("is_valid")
  transactionId Int               @map("transaction_id")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  images        Image[]
  transaction   Transaction       @relation(fields: [transactionId], references: [id])

  @@index([transactionId], map: "transaction_details_transaction_id_fkey")
  @@map("transaction_details")
}

model Review {
  id            Int         @id @default(autoincrement())
  rating        Int
  review        String      @db.Text
  reservationId Int         @map("reservation_id")
  userId        String      @map("user_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@index([reservationId], map: "reviews_reservation_id_fkey")
  @@index([userId], map: "reviews_user_id_fkey")
  @@map("reviews")
}

enum Role {
  admin
  user
}

enum ImageEntity {
  category
  transaction
}

enum ReservationStatus {
  pending
  success
  cancelled
}

enum TransactionStatus {
  unpaid
  paid
  expired
}

enum TransactionType {
  downpayment
  fullpayment
}

enum TransactionValid {
  true
  false
}
